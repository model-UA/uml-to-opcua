library States;

import Common.Helpers;

modeltype UML uses 'http://www.eclipse.org/uml2/5.0.0/UML';
modeltype OPCUA uses set('http://opcfoundation.org/UA/2011/03/UANodeSet.xsd');

mapping UML::Pseudostate::pseudostate2InitialState(inout parent : OPCUA::UANode) : OPCUA::UAObject {
	log("pseudostate2InitialState for UML element " + self.name);

	// set attributes of the OPCUA::UAObjectType
	browseName := self.createBrowseName();
	nodeId := self.createNodeId();
	displayName := object OPCUA::LocalizedText{value := browseName};
	parentNodeId := parent.nodeId;
	
	// create the list of references object 
	_references := object OPCUA::ListOfReferences{};
	_references.reference += object OPCUA::Reference{referenceType := getId("HasTypeDefinition"); value := getId("InitialStateType")}; 
	_references.reference += object OPCUA::Reference{referenceType := getId("HasModellingRule"); value := getId("ModellingRule_Mandatory")}; // TODO replace with correct modelling rule
	_references.reference += object OPCUA::Reference{referenceType := getId("HasComponent"); value := parent.nodeId; isForward := false};

	// add a reference from the parent node to this node
	parent._references.reference += object OPCUA::Reference{referenceType := getId("HasComponent"); value := result.nodeId};
}

mapping UML::State::state2State(inout parent : OPCUA::UANode) : OPCUA::UAObject {
	log("state2State for UML element " + self.name);

	// set attributes of the OPCUA::UAObjectType
	browseName := self.createBrowseName();
	nodeId := self.createNodeId();
	displayName := object OPCUA::LocalizedText{value := browseName};
	parentNodeId := parent.nodeId;
	
	// create the list of references object 
	_references := object OPCUA::ListOfReferences{};
	_references.reference += object OPCUA::Reference{referenceType := getId("HasTypeDefinition"); value := getId("StateType")};
	_references.reference += object OPCUA::Reference{referenceType := getId("HasModellingRule"); value := getId("ModellingRule_Mandatory")}; // TODO replace with correct modelling rule
	_references.reference += object OPCUA::Reference{referenceType := getId("HasComponent"); value := parent.nodeId; isForward := false};

	// add a reference from the parent node to this node
	parent._references.reference += object OPCUA::Reference{referenceType := "HasComponent"; value := result.nodeId};
	
	// check if the state contains a sub state machine
	if(self.isSubmachineState = true and self.submachine <> null) {
		// add the the referenced sub state machine via a OPCUA::HasSubStateMachine reference
		_references.reference += object OPCUA::Reference{referenceType := getId("HasSubStateMachine"); value := self.submachine.createNodeId()};
	}
}
