library Classes;

import ClassDiagram.Properties;
import ClassDiagram.References;
import ClassDiagram.Operations;
import ClassDiagram.Instances;

modeltype UML uses 'http://www.eclipse.org/uml2/5.0.0/UML';
modeltype OPCUA uses set('http://opcfoundation.org/UA/2011/03/UANodeSet.xsd');
modeltype TYPES uses types('http://opcfoundation.org/UA/2008/02/Types.xsd');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');

mapping UML::Class::class2OPCUAObjectType(inout nodeset : OPCUA::UANodeSetType) : OPCUA::UAObjectType {
	log("class2OPCUAObjectType for UML element " + self.name);
	
	// set attributes of the OPCUA::UAObjectType
	browseName := self.createBrowseName();
	nodeId := self.createNodeId();
	displayName := (object OPCUA::LocalizedText {value := browseName})->asOrderedSet();
	
	// create the list of references object
	_references := object OPCUA::ListOfReferences{};
	if(self.ownedElement->selectByType(UML::Generalization)->size() > 0) { //check if the class has any supertypes
		// transform generalizations (i.e. subclass references) of the class
		_references.reference += self.ownedElement->selectByType(UML::Generalization)->map generalization2UAReference();
	} else {
		 // if the class has no other supertypes, use the BaseObjectType as supertype
		_references.reference += object OPCUA::Reference{referenceType := getIdOrAlias("HasSubtype"); value := getIdOrAlias("BaseObjectType"); isForward := false};
	};
	
	// transform properties of the class
	self.transformPropertiesAndLinkToUANode(result, nodeset);
	
	// transform operations of the class
	nodeset.uAMethod += self.ownedElement->selectByType(UML::Operation)->map operation2UAMethod(result, nodeset);
}

