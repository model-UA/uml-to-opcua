library References;

import Common.Helpers;

modeltype UML uses 'http://www.eclipse.org/uml2/5.0.0/UML';
modeltype OPCUA uses set('http://opcfoundation.org/UA/2011/03/UANodeSet.xsd');


mapping UML::Generalization::generalization2UAReference() : OPCUA::Reference {
	log("generalization2UAReference: UML element " + self.source->any(0=0).oclAsType(NamedElement).name + " is inherited from UML element " + self.target->any(0=0).oclAsType(NamedElement).name);
	
	assert error (self.target->size() = 1) with log ("Only single inheritance is supported for UML to OPC UA transformation");

	// set attributes of the OPCUA::Reference, self.target should only contain 1 element
	value := self.target->any(0=0).oclAsType(NamedElement).createNodeId();
	referenceType := getIdOrAlias("HasSubtype");
	isForward := false;
}

// TODO: check what happens if the source object and the target object are in different namespaces
mapping UML::Property::property2UAReference(inout nodeset : OPCUA::UANodeSetType) : OPCUA::Reference {
	if(self.name <> null) {
		log("property2Reference for UML property " + self.name);
	} else {
		log("property2Reference for unnamed UML property");
	};

	// create a new UAReferenceType if not available yet
	// TODO: check if the reference type has already been created

	assert error (self.association.name <> null) with log ("Unnamed associations are not supported!");
	
	log("Creating new reference type " + self.association.name);
	var newReferenceType := object OPCUA::UAReferenceType {
		nodeId := self.association.createNodeId();
		browseName := self.association.name;
		displayName := object OPCUA::LocalizedText{value := self.association.name};
	};

	// add the list of references
	newReferenceType._references := object OPCUA::ListOfReferences{};
	newReferenceType._references.reference += object OPCUA::Reference{referenceType := "HasSubtype"; value := getIdOrAlias("NonHierarchicalReferences"); isForward := false};

	// add the new reference type to the nodeset
	nodeset.uAReferenceType += newReferenceType;
	
	value := self.type.createNodeId();
	referenceType := newReferenceType.nodeId; // use the nodeId for now, TODO: add an entry to the alias table
}

