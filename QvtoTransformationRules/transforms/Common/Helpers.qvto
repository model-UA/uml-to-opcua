/*
 * This file contains helper functions, i.e. functions that fulfill a certain functionality
 * that is reused often or would negatively effect the readability of the actual transformation.
 */

library Helpers;
import Configuration;
import Constants;
import Blackbox.Uml2OpcuaBlackbox;
modeltype UML uses 'http://www.eclipse.org/uml2/5.0.0/UML';
modeltype OPCUA uses set('http://opcfoundation.org/UA/2011/03/UANodeSet.xsd');
modeltype NodeIdsCsv uses NodeIdsCsv('http://at.ac.tuwien.auto.modelua.uml2opcua.NodeIdsCsv.ecore');

// Naming convention:
// identifier have the form i=256
// nodeIds have the form ns=2;s=someString

property nodeIdCount : Integer = 1000;
property nodeIdLookupTable : Dict(UML::Element, String); // used to ensure that a nodeId is reused if it is generated for the same UML::Element twice

// entries are of the form "http://opcfoundation.org/UA/","NonHierarchicalReferences","i=32"
property IdentifierLookupTable : Dict(String,Dict(String,String)); 

// the following properties contain information only for namespaces that are acutally used by the model
property nextNamespaceIndex : Integer = 1; // variable used to keep track of namespace indices, namespace 0 is the OPC UA base namespace
property NamespaceUri2NamespaceIndex : Dict(String,Integer); // entries of the form "http://opcfoundation.org/UA/", 0
property NamespaceIndex2NamespaceUri : Dict(Integer,String); // entries of the form 0, "http://opcfoundation.org/UA/"
property AliasesForAliasTable : Set(String); // a set does not contain duplicates

// "traverse the element tree upwards " until a UML::Package or a UML::Model is reached to get the namespace
helper UML::Element::getUri() : String {
	var element := self;
	var uri : String;
	while(element <> null) {
		if(element.oclIsTypeOf(UML::Package)) {
			var package := element.oclAsType(UML::Package);
			if(package.URI <> null and package.URI.length() > 0) {
				uri := package.URI;
				break;
			} else if(package.name <> null and package.name.length() > 0) {
				uri := package.name;
				break;
			} else {
				element := element.owner;
				continue;
			};
		}
		else if(element.oclIsTypeOf(UML::Model)) {
			var model := element.oclAsType(UML::Model);
			if(model.URI <> null and model.URI.length() > 0) {
				uri := model.URI;
				break;
			} else if(model.name <> null and model.name.length() > 0) {
				uri := model.name;
				break;
			} else {
				raise Exception("Could not identify a namespace for UML::Element" + self.toString() +
			                    "Add it to a UML::Package or define a URI or name for your UML::Model");
			};
		};
		element := element.owner;
	};
	
	// if the does not have an Id yet, assign one and add it to the corresponding dictionaries
	if(not NamespaceUri2NamespaceIndex->hasKey(uri)) {
		addNamespace(nextNamespaceIndex, uri);
		nextNamespaceIndex := nextNamespaceIndex + 1;
	};
	return uri;
}

helper UML::Element::getNodeIdPrefix() : String {
	var ns := self.getUri();
	return "ns=" + NamespaceUri2NamespaceIndex->get(ns).toString() + ";i=";
}

helper UML::NamedElement::getNamePostfix() : String {
	switch {
		case(self.oclIsTypeOf(UML::Class)) return "Type";
		case(self.oclIsTypeOf(UML::StateMachine)) return "Type";
		else return "";
	};
}

// the same as createNodeId(true)
helper UML::Element::createNodeId() : String {
	// check if there has already been generated a nodeId for this UML::Element and if so, reuse that node id;
	var nodeId := "";
	if(nodeIdLookupTable->keys()->includes(self)) {
		nodeId := nodeIdLookupTable->get(self);
	} else {
		nodeId := self.getNodeIdPrefix() + nodeIdCount.toString();
		nodeIdLookupTable->put(self, nodeId);
		nodeIdCount := nodeIdCount + 1;
	};
	return nodeId;
}

helper UML::Element::createNodeId(canReuseExistingNode : Boolean) : String {
	var nodeId := "";
	if(canReuseExistingNode) {
		nodeId := self.createNodeId();
	} else {
		nodeId := self.getNodeIdPrefix() + nodeIdCount.toString();
		nodeIdLookupTable->put(self, nodeId);
		nodeIdCount := nodeIdCount + 1;
	};
	return nodeId;
}


helper UML::NamedElement::createBrowseName() : String {
	assert error (self.name <> null) with log ("Cannot create browseName because the UML::Element does not have a name: " + self.toString());
	return self.name + self.getNamePostfix();
}

helper addNamespace(namespaceIndex : Integer, namespaceUri : String) {
	NamespaceIndex2NamespaceUri->put(namespaceIndex, namespaceUri);
	NamespaceUri2NamespaceIndex->put(namespaceUri, namespaceIndex);
}

// TODO: Support loading the NodeIds for the same Namespace from different CSV files
helper loadExternalNodeIds(namespaceUri : String, filename : String ) {
	var y : Dict(String,String) := readNodeIdsCsv(filename);
	IdentifierLookupTable->put(namespaceUri, y);
}

helper getNamespaceIndex(namespaceUri : String) : Integer {
	return NamespaceUri2NamespaceIndex->get(namespaceUri);
}

helper getNamespaceUri(namespaceIndex : Integer) : String {
	return NamespaceIndex2NamespaceUri->get(namespaceIndex);
}

helper loadInternalNodeIds() {
	// add NodeIds for Namespace 0
	var y : Dict(String,String);
	y->put("Boolean", "i=1");
	y->put("Int32", "i=6");
	y->put("Int32", "i=6");
	y->put("Double", "i=11");
	y->put("String", "i=12");
	y->put("NodeId", "i=17");
	y->put("LocalizedText", "i=21");
	y->put("NonHierarchicalReferences", "i=32");
	y->put("Organizes", "i=35");
	y->put("HasModellingRule", "i=37");
	y->put("HasTypeDefinition", "i=40");
	y->put("HasSubtype", "i=45");
	y->put("HasProperty", "i=46");
	y->put("HasComponent", "i=47");
	y->put("FromState", "i=51");
	y->put("ToState", "i=52");
	y->put("HasCause", "i=53");
	y->put("HasEffect", "i=54");
	y->put("BaseObjectType", "i=58");
	y->put("BaseDataVariableType", "i=63");
	y->put("PropertyType", "i=68");
	y->put("ModellingRule_Mandatory", "i=78");
	y->put("ModellingRule_Optional", "i=80");
	y->put("ObjectsFolder", "i=85");
	y->put("HasSubStateMachine", "i=117");
	y->put("ModellingRule_OptionalPlaceholder", "i=11508");
	y->put("ModellingRule_MandatoryPlaceholder", "i=11510");
	y->put("Argument", "i=296");
	y->put("Argument_Encoding_DefaultXml", "i=297");
	y->put("ContentFilter", "i=586");
	y->put("ContentFilter_Encoding_DefaultXml", "i=587");
	y->put("StateType", "i=2307");
	y->put("TransitionType", "i=2310");
	y->put("TransitionEventType", "i=2311");
	y->put("InitialStateType", "i=2309");
	y->put("FiniteStateMachineType", "i=2771");
	y->put("FiniteStateVariableType", "i=2760");
	y->put("FiniteStateVariableType_Id", "i=2761");
	y->put("HasGuard", "i=15112");
	y->put("GuardVariableType", "i=15113");
	y->put("ExpressionGuardVariableType", "i=15128");
	IdentifierLookupTable->put(OPCUA_NAMESPACE_URI, y);
}

helper fillAliasTable(inout aliasTable : OPCUA::AliasTable) {
	aliasTable.alias += AliasesForAliasTable->map createAliasTableEntry();
}

mapping String::createAliasTableEntry() : OPCUA::NodeIdAlias {
	value := IdentifierLookupTable->get(OPCUA_NAMESPACE_URI)->get(self);
	alias := self;
	
	assert fatal (value <> null) with log("No Identifier found in the Identifier Lookup Table for node " + self.toString());
}

helper fillUriTable(inout uriTable : OPCUA::UriTable) {
	uriTable.uri += NamespaceUri2NamespaceIndex->keys()->asSequence()->excluding(OPCUA_NAMESPACE_URI);
}

// returns something like i=12 / s=someString or the Alias, like String
// this is only valid for namespace 0
helper getIdOrAlias(name : String) : String {
	// add the name to the AliasesForAliasTable
	// this means, it is used and needs to be added to the alias table after the transformation has finished
	if(CFG_ENABLE_ALIAS_TABLE)
		AliasesForAliasTable += name;

	if(CFG_ENABLE_ALIAS_TABLE)
		return name; // just use the human-readable name as identifier if ALIAS_TABLE is enabled
		
	var id := IdentifierLookupTable->get(OPCUA_NAMESPACE_URI)->get(name);
	
	assert fatal (id <> null)  with log("No Identifier found in the Identifier Lookup Table for node " + name);

	return id;
}

// returns something like i=12 / s=someString
// this is only valid for namespace 0
helper getId(name : String) : String {
	var id := IdentifierLookupTable->get(OPCUA_NAMESPACE_URI)->get(name);
	
	assert fatal (id <> null)  with log("No Identifier found in the Identifier Lookup Table for node " + name);

	return id;
}

// checks if an InstanceSpecification is itself used in a slot of another instance specification
// @return the instance specification that contains this instance specification or null
helper UML::InstanceSpecification::getContainingInstanceSpecification() : UML::InstanceSpecification {
	// TODO: check type
	var model = self.owner.oclAsType(UML::Model);
	var found := false;
	
	// check the slots of all InstanceSpecifications
	var element := self;
	var uri : String;
	
	var containingInstanceSpecification : UML::InstanceSpecification := null; // the instance specification that contains self as slot
	var setOfAllInstanceSpecifications := model.ownedElement->selectByType(UML::InstanceSpecification);
	
	setOfAllInstanceSpecifications->forEach(instanceSpecification){
		instanceSpecification.slot->forEach(slot) {
			slot.value->forEach(slotValue) {
				if(slotValue.oclIsTypeOf(UML::InstanceValue) and slotValue.oclAsType(UML::InstanceValue).instance = self) {
					assert warning (containingInstanceSpecification = null) with log("InstanceSpecification " + self.toString() + " is used by more than one slot. This is generally not supported and may result in errors.");
					containingInstanceSpecification := instanceSpecification;
				};
			};
		};
	};
	
	return containingInstanceSpecification
}

// checks if an InstanceSpecification is itself used in a slot of another instance specification
helper UML::InstanceSpecification::isItselfASlot() : Boolean {
	if(self.getContainingInstanceSpecification() <> null) {
		return true;
	};
	return false;
}

/*
 * Creates a unique symbol for a node; to be used in the node id csv 
 * The standard suggests to distinguish between UAType and UAInstance nodes
 */
helper OPCUA::UANode::createNodeIdsCsvRow(setOfAllNodes : Set(OPCUA::UANode)) : NodeIdsCsv::NodeIdsCsvRow {
	// log("createNodeIdsCsvLine for " + self.nodeId + " : " + self.browseName);
	var nodeIdSymbolName : String = "";
	var nodeIdIdentifier : String = self.nodeId.substringAfter(";i=");
	var nodeIdNodeClass : String = "";
	if(self.oclIsKindOf(OPCUA::UAInstance)) {
		var instance := self.oclAsType(OPCUA::UAInstance);
		nodeIdSymbolName := nodeIdSymbolName + instance.browseName;

		if(self.oclAsType(OPCUA::UAInstance).parentNodeId <> null){
			var parentNodes := setOfAllNodes->select(node | node.nodeId = instance.parentNodeId);
			assert fatal (parentNodes->size() >= 1) with log("No node matches nodeId " + instance.parentNodeId);
			assert warning (parentNodes->size() <= 1) with log("More than one node matches nodeId " + instance.parentNodeId);
			var parentNode := parentNodes->asList()->first();
			
			while(parentNode <> null) {
				// log("parentNode: " + parentNode.toString());
				nodeIdSymbolName := parentNode.browseName + "_" + nodeIdSymbolName;
				if(parentNode.oclIsKindOf(OPCUA::UAInstance) and parentNode.oclAsType(OPCUA::UAInstance).parentNodeId <> null) {
					var parentNodeInstance := parentNode.oclAsType(OPCUA::UAInstance);
					parentNodes := setOfAllNodes->select(node | node.nodeId = parentNodeInstance.parentNodeId);
					assert fatal (parentNodes->size() >= 1) with log("No node matches nodeId " + parentNodeInstance.parentNodeId);
					assert warning (parentNodes->size() <= 1) with log("More than one node matches nodeId " + parentNodeInstance.parentNodeId);
					parentNode := parentNodes->asList()->first();
				} else {
					parentNode := null;
				};
			};
		};
	} else if(self.oclIsKindOf(OPCUA::UAType)) {
		nodeIdSymbolName := self.browseName;
	} else {
		log("not creating a node id csv entry for node " + self.nodeId + " because it is neither of kind UAInstance nor UAType");
	}; 
	
	switch {
		case(self.oclIsTypeOf(OPCUA::UAObjectType)) nodeIdNodeClass := "ObjectType";
		case(self.oclIsTypeOf(OPCUA::UAObject)) nodeIdNodeClass := "Object";
		case(self.oclIsTypeOf(OPCUA::UAVariableType)) nodeIdNodeClass := "VariableType";
		case(self.oclIsTypeOf(OPCUA::UAVariable)) nodeIdNodeClass := "Variable";
		case(self.oclIsTypeOf(OPCUA::UADataType)) nodeIdNodeClass := "DataType";
		case(self.oclIsTypeOf(OPCUA::UAReferenceType)) nodeIdNodeClass := "ReferenceType";
		case(self.oclIsTypeOf(OPCUA::UAMethod)) nodeIdNodeClass := "Method";
		case(self.oclIsTypeOf(OPCUA::UAView)) nodeIdNodeClass := "View";
		else raise Exception("Could not determine the OPCUA Node Class of node " + self.nodeId + " : " + self.browseName);
	};
	
	var nodeIdsCsvRow := object NodeIdsCsv::NodeIdsCsvRow{};
	nodeIdsCsvRow.SymbolName := nodeIdSymbolName;
	nodeIdsCsvRow.Identifier := nodeIdIdentifier;
	nodeIdsCsvRow.NodeClass := nodeIdNodeClass;
	
	return nodeIdsCsvRow;	
}

/*
 * Creates the contents of the node id csv:  https://reference.opcfoundation.org/v104/CNC/v100/docs/A.1/
 * Each line of the CSV file is of the form <SymbolName>, <Identifier>, <NodeClass>
 */
helper OPCUA::UANodeSetType::createNodeIdsCsv(inout nodeIdsCsvFile : NodeIdsCsv::NodeIdsCsvFile) {
	log("createNodeIdsCsv");
	var setOfAllNodes : Set(OPCUA::UANode) := self.allSubobjectsOfKind(OPCUA::UAType);
	setOfAllNodes := setOfAllNodes->union(self.allSubobjectsOfKind(OPCUA::UAInstance));
	setOfAllNodes->forEach(node) {
		nodeIdsCsvFile.nodeIdsCsvRows += node.createNodeIdsCsvRow(setOfAllNodes);
	};
}